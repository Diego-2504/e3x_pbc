# Copyright 2024 The e3x Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import e3x
import jax.numpy as jnp
import pytest


def test__gaussian() -> None:
  x = jnp.linspace(0, 1, 11)
  expected_value = jnp.asarray([
      [1.0000000e00, 3.8953209e-01, 2.3023585e-02, 2.0648536e-04],
      [9.1864747e-01, 6.3003719e-01, 6.5564685e-02, 1.0352867e-03],
      [7.1218950e-01, 8.5997713e-01, 1.5756679e-01, 4.3805540e-03],
      [4.6595076e-01, 9.9061620e-01, 3.1956363e-01, 1.5642131e-02],
      [2.5726593e-01, 9.6298993e-01, 5.4695004e-01, 4.7136799e-02],
      [1.1987326e-01, 7.9001588e-01, 7.9001582e-01, 1.1987326e-01],
      [4.7136799e-02, 5.4695004e-01, 9.6298993e-01, 2.5726599e-01],
      [1.5642131e-02, 3.1956366e-01, 9.9061620e-01, 4.6595076e-01],
      [4.3805540e-03, 1.5756682e-01, 8.5997719e-01, 7.1218956e-01],
      [1.0352852e-03, 6.5564655e-02, 6.3003719e-01, 9.1864753e-01],
      [2.0648536e-04, 2.3023602e-02, 3.8953215e-01, 1.0000000e00],
  ])
  expected_grad = jnp.asarray([
      [0.0, 2.2035263, 0.26048213, 0.00350417],
      [-1.5589963, 2.49482, 0.6305127, 0.01581246],
      [-2.417251, 1.9459062, 1.2478653, 0.05947237],
      [-2.372234, 0.5603771, 1.9884973, 0.18581903],
      [-1.7463789, -1.0894986, 2.4752135, 0.4799628],
      [-1.0171583, -2.234502, 2.2345023, 1.0171583],
      [-0.4799628, -2.4752135, 1.0894986, 1.7463791],
      [-0.18581903, -1.9884973, -0.5603766, 2.372234],
      [-0.05947237, -1.2478654, -1.9459062, 2.417251],
      [-0.01581243, -0.6305125, -2.49482, 1.558996],
      [-0.00350417, -0.26048228, -2.2035263, -0.0],
  ])
  value, grad = e3x.ops.evaluate_derivatives(
      lambda x: e3x.nn.functions.gaussian._gaussian(x, num=4), x, max_order=1
  )
  assert jnp.allclose(value, expected_value, atol=1e-5)
  assert jnp.allclose(grad, expected_grad, atol=1e-5)


@pytest.mark.parametrize('num', [1, 4, 1024])
def test__gaussian_has_nan_safe_derivatives(num: int) -> None:
  finfo = jnp.finfo(jnp.float32)
  x = jnp.asarray(
      [
          0.0,
          finfo.tiny,
          finfo.eps,
          0.5,
          1.0 - finfo.epsneg,
          1.0,
          1.0 + finfo.eps,
      ],
      dtype=jnp.float32,
  )
  for y in e3x.ops.evaluate_derivatives(
      lambda x: e3x.nn.functions.gaussian._gaussian(x, num=num), x, max_order=4
  ):
    assert jnp.all(jnp.isfinite(y))


def test__gaussian_raises_with_invalid_num() -> None:
  with pytest.raises(ValueError, match='num must be greater or equal to 1'):
    e3x.nn.functions.gaussian._gaussian(0, num=0)


def test_basic_gaussian() -> None:
  x = jnp.linspace(-1.0, 2.0, 11)
  expected = jnp.asarray([
      [
          3.9395441e-06,
          1.0740900e-08,
          9.3389463e-12,
          2.5895119e-15,
          2.2898303e-19,
          6.4573456e-24,
          5.8071115e-29,
          1.6654692e-34,
      ],
      [
          2.2478574e-03,
          3.0355277e-05,
          1.3072648e-07,
          1.7953705e-10,
          7.8634229e-14,
          1.0983217e-17,
          4.8922785e-22,
          6.9496265e-27,
      ],
      [
          1.3654359e-01,
          9.1328844e-03,
          1.9480856e-04,
          1.3251712e-06,
          2.8747360e-09,
          1.9887937e-12,
          4.3877665e-16,
          3.0871847e-20,
      ],
      [
          8.8298738e-01,
          2.9252470e-01,
          3.0905381e-02,
          1.0412827e-03,
          1.1188370e-05,
          3.8337930e-08,
          4.1894106e-11,
          1.4599711e-14,
      ],
      [
          6.0788006e-01,
          9.9746352e-01,
          5.2196282e-01,
          8.7105460e-02,
          4.6356954e-03,
          7.8677047e-05,
          4.2583687e-07,
          7.3502787e-10,
      ],
      [
          4.4551414e-02,
          3.6208618e-01,
          9.3848157e-01,
          7.7571630e-01,
          2.0447659e-01,
          1.7188886e-02,
          4.6080255e-04,
          3.9395550e-06,
      ],
      [
          3.4760436e-04,
          1.3992875e-02,
          1.7963548e-01,
          7.3542881e-01,
          9.6017963e-01,
          3.9978623e-01,
          5.3084318e-02,
          2.2478583e-03,
      ],
      [
          2.8872898e-07,
          5.7568166e-05,
          3.6604875e-03,
          7.4226461e-02,
          4.8000050e-01,
          9.8989272e-01,
          6.5102530e-01,
          1.3654365e-01,
      ],
      [
          2.5531369e-11,
          2.5213751e-08,
          7.9408119e-06,
          7.9754740e-04,
          2.5545288e-02,
          2.6093274e-01,
          8.4998238e-01,
          8.8298750e-01,
      ],
      [
          2.4034814e-16,
          1.1756407e-12,
          1.8338925e-09,
          9.1229720e-07,
          1.4473105e-04,
          7.3223440e-03,
          1.1814154e-01,
          6.0788006e-01,
      ],
      [
          2.4087059e-22,
          5.8356798e-18,
          4.5087848e-14,
          1.1109502e-10,
          8.7295305e-08,
          2.1875139e-05,
          1.7481346e-03,
          4.4551402e-02,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.basic_gaussian(x, num=8, limit=1.5), expected, atol=1e-5
  )


def test_reciprocal_gaussian() -> None:
  x = jnp.linspace(0.0, 10.0, 11)
  expected = jnp.asarray([
      [
          1.00000000e00,
          5.64718127e-01,
          1.01701379e-01,
          5.84097207e-03,
          1.06981184e-04,
          6.24875042e-07,
          1.16396670e-09,
          6.91440015e-13,
      ],
      [
          9.11881973e-04,
          2.81156600e-02,
          2.76453078e-01,
          8.66878033e-01,
          8.66877794e-01,
          2.76452988e-01,
          2.81156264e-02,
          9.11881973e-04,
      ],
      [
          3.93955497e-06,
          4.60803451e-04,
          1.71889104e-02,
          2.04476848e-01,
          7.75716662e-01,
          9.38481450e-01,
          3.62085760e-01,
          4.45514023e-02,
      ],
      [
          1.44498017e-07,
          3.29200629e-05,
          2.39178771e-03,
          5.54176793e-02,
          4.09484208e-01,
          9.64915991e-01,
          7.25112081e-01,
          1.73773944e-01,
      ],
      [
          1.64984080e-08,
          5.60736999e-06,
          6.07770286e-04,
          2.10079029e-02,
          2.31573746e-01,
          8.14065635e-01,
          9.12626326e-01,
          3.26279819e-01,
      ],
      [
          3.59240926e-09,
          1.59409251e-06,
          2.25582669e-04,
          1.01803057e-02,
          1.46513999e-01,
          6.72451615e-01,
          9.84252155e-01,
          4.59425747e-01,
      ],
      [
          1.16397114e-09,
          6.24875042e-07,
          1.06981286e-04,
          5.84098045e-03,
          1.01701409e-01,
          5.64718127e-01,
          1.00000000e00,
          5.64718127e-01,
      ],
      [
          4.89566887e-10,
          3.03183299e-07,
          5.98771803e-05,
          3.77122057e-03,
          7.57469684e-02,
          4.85190272e-01,
          9.91111219e-01,
          6.45648539e-01,
      ],
      [
          2.46549836e-10,
          1.70628937e-07,
          3.76586540e-05,
          2.65057129e-03,
          5.94946370e-02,
          4.25872445e-01,
          9.72175837e-01,
          7.07739651e-01,
      ],
      [
          1.41319415e-10,
          1.06894035e-07,
          2.57850970e-05,
          1.98357296e-03,
          4.86620292e-02,
          3.80711317e-01,
          9.49871719e-01,
          7.55783677e-01,
      ],
      [
          8.91683186e-11,
          7.25350731e-08,
          1.88169124e-05,
          1.55672745e-03,
          4.10714149e-02,
          3.45565468e-01,
          9.27223623e-01,
          7.93417931e-01,
      ],
  ])
  assert jnp.allclose(e3x.nn.reciprocal_gaussian(x, num=8), expected, atol=1e-5)


def test_exponential_gaussian() -> None:
  x = jnp.linspace(0.0, 10.0, 11)
  expected = jnp.asarray([
      [
          1.00000000e00,
          5.64718127e-01,
          1.01701379e-01,
          5.84097207e-03,
          1.06981184e-04,
          6.24875042e-07,
          1.16396670e-09,
          6.91440015e-13,
      ],
      [
          1.38373516e-05,
          1.22771156e-03,
          3.47378887e-02,
          3.13454062e-01,
          9.02002156e-01,
          8.27760577e-01,
          2.42250741e-01,
          2.26094313e-02,
      ],
      [
          8.09938339e-10,
          4.61781127e-07,
          8.39625718e-05,
          4.86851903e-03,
          9.00267810e-02,
          5.30896783e-01,
          9.98417079e-01,
          5.98793924e-01,
      ],
      [
          1.04823103e-11,
          1.18486163e-08,
          4.27110535e-06,
          4.90995648e-04,
          1.80001967e-02,
          2.10445955e-01,
          7.84634829e-01,
          9.32948768e-01,
      ],
      [
          1.91038006e-12,
          2.77761947e-09,
          1.28792146e-06,
          1.90444684e-04,
          8.98072496e-03,
          1.35057181e-01,
          6.47720397e-01,
          9.90651071e-01,
      ],
      [
          1.00709903e-12,
          1.60638580e-09,
          8.17129319e-07,
          1.32555040e-04,
          6.85746735e-03,
          1.13134488e-01,
          5.95236957e-01,
          9.98729587e-01,
      ],
      [
          7.94263960e-13,
          1.31081135e-09,
          6.89890271e-07,
          1.15792893e-04,
          6.19794149e-03,
          1.05797797e-01,
          5.75929582e-01,
          9.99827981e-01,
      ],
      [
          7.27649115e-13,
          1.21602151e-09,
          6.48074661e-07,
          1.10146531e-04,
          5.97008225e-03,
          1.03193745e-01,
          5.68839967e-01,
          9.99976695e-01,
      ],
      [
          7.04549104e-13,
          1.18286037e-09,
          6.33314414e-07,
          1.08135566e-04,
          5.88817894e-03,
          1.02248415e-01,
          5.66234171e-01,
          9.99996841e-01,
      ],
      [
          6.96233273e-13,
          1.17088272e-09,
          6.27965392e-07,
          1.07404507e-04,
          5.85830212e-03,
          1.01902351e-01,
          5.65275908e-01,
          9.99999583e-01,
      ],
      [
          6.93201573e-13,
          1.16651144e-09,
          6.26010717e-07,
          1.07136992e-04,
          5.84735069e-03,
          1.01775341e-01,
          5.64923644e-01,
          9.99999940e-01,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.exponential_gaussian(x, num=8), expected, atol=1e-5
  )
