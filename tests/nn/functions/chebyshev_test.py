# Copyright 2024 The e3x Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import e3x
import jax.numpy as jnp
import pytest


def test__chebyshev() -> None:
  x = jnp.linspace(-1, 1, 11)
  expected_value = jnp.asarray([
      [1.0000000e00, -1.0000000e00, 1.0000000e00, -1.0000000e00],
      [1.0000000e00, -7.9999995e-01, 2.7999982e-01, 3.5200047e-01],
      [1.0000000e00, -6.0000008e-01, -2.7999982e-01, 9.3599981e-01],
      [1.0000000e00, -3.9999998e-01, -6.8000001e-01, 9.4400001e-01],
      [1.0000000e00, -2.0000008e-01, -9.1999996e-01, 5.6800020e-01],
      [1.0000000e00, -4.3711388e-08, -1.0000000e00, 1.1924881e-08],
      [1.0000000e00, 2.0000011e-01, -9.1999990e-01, -5.6800020e-01],
      [1.0000000e00, 4.0000001e-01, -6.8000001e-01, -9.4399995e-01],
      [1.0000000e00, 6.0000002e-01, -2.7999997e-01, -9.3599999e-01],
      [1.0000000e00, 8.0000007e-01, 2.8000024e-01, -3.5199958e-01],
      [1.0000000e00, 1.0000000e00, 1.0000000e00, 1.0000000e00],
  ])
  expected_grad = jnp.asarray([
      [-0.0000000e00, 1.0000000e00, -4.0000000e00, 9.0000000e00],
      [0.0000000e00, 1.0000000e00, -3.1999996e00, 4.6799984e00],
      [0.0000000e00, 9.9999994e-01, -2.4000001e00, 1.3200018e00],
      [0.0000000e00, 9.9999994e-01, -1.5999999e00, -1.0800002e00],
      [0.0000000e00, 9.9999994e-01, -8.0000031e-01, -2.5199993e00],
      [0.0000000e00, 1.0000000e00, -1.7484555e-07, -3.0000000e00],
      [0.0000000e00, 9.9999994e-01, 8.0000043e-01, -2.5199995e00],
      [0.0000000e00, 1.0000000e00, 1.6000000e00, -1.0800003e00],
      [0.0000000e00, 1.0000000e00, 2.3999999e00, 1.3200001e00],
      [0.0000000e00, 1.0000000e00, 3.2000003e00, 4.6800017e00],
      [0.0000000e00, 1.0000000e00, 4.0000000e00, 9.0000000e00],
  ])
  value, grad = e3x.ops.evaluate_derivatives(
      lambda x: e3x.nn.functions.chebyshev._chebyshev(x, num=4), x, max_order=1
  )
  assert jnp.allclose(value, expected_value, atol=1e-5)
  assert jnp.allclose(grad, expected_grad, atol=1e-5)


@pytest.mark.parametrize('num', [1, 4, 1024])
def test__chebyshev_has_nan_safe_derivatives(num: int) -> None:
  finfo = jnp.finfo(jnp.float32)
  x = jnp.asarray(
      [-1.0, -(1.0 - finfo.epsneg), 0.0, 1.0 - finfo.epsneg, 1.0],
      dtype=jnp.float32,
  )
  for y in e3x.ops.evaluate_derivatives(
      lambda x: e3x.nn.functions.chebyshev._chebyshev(x, num=num),
      x,
      max_order=4,
  ):
    assert jnp.all(jnp.isfinite(y))


def test__chebyshev_raises_with_invalid_num() -> None:
  with pytest.raises(ValueError, match='num must be greater or equal to 1'):
    e3x.nn.functions.chebyshev._chebyshev(0, num=0)


def test_basic_chebyshev() -> None:
  x = jnp.linspace(-0.1, 1.6, 11)
  expected = jnp.asarray([
      [
          1.0000000e00,
          -1.0000000e00,
          1.0000000e00,
          -1.0000000e00,
          1.0000000e00,
          -1.0000000e00,
          1.0000000e00,
          -1.0000000e00,
      ],
      [
          1.0000000e00,
          -9.0666664e-01,
          6.4408880e-01,
          -2.6128125e-01,
          -1.7029923e-01,
          5.7009047e-01,
          -8.6346424e-01,
          9.9565852e-01,
      ],
      [
          1.0000000e00,
          -6.8000001e-01,
          -7.5200059e-02,
          7.8227192e-01,
          -9.8868990e-01,
          5.6234598e-01,
          2.2389868e-01,
          -8.6684936e-01,
      ],
      [
          1.0000000e00,
          -4.5333344e-01,
          -5.8897763e-01,
          9.8733991e-01,
          -3.0621076e-01,
          -7.0970875e-01,
          9.4968015e-01,
          -1.5133476e-01,
      ],
      [
          1.0000000e00,
          -2.2666660e-01,
          -8.9724451e-01,
          6.3341749e-01,
          6.1009538e-01,
          -9.0999371e-01,
          -1.9756453e-01,
          9.9955660e-01,
      ],
      [
          1.0000000e00,
          7.5497901e-08,
          -1.0000000e00,
          1.1924881e-08,
          1.0000000e00,
          6.1590805e-07,
          -1.0000000e00,
          -2.9006671e-07,
      ],
      [
          1.0000000e00,
          2.2666663e-01,
          -8.9724445e-01,
          -6.3341749e-01,
          6.1009532e-01,
          9.0999383e-01,
          -1.9756457e-01,
          -9.9955660e-01,
      ],
      [
          1.0000000e00,
          4.5333356e-01,
          -5.8897734e-01,
          -9.8733997e-01,
          -3.0621132e-01,
          7.0970821e-01,
          9.4968045e-01,
          1.5133581e-01,
      ],
      [
          1.0000000e00,
          6.8000019e-01,
          -7.5199522e-02,
          -7.8227162e-01,
          -9.8869008e-01,
          -5.6234741e-01,
          2.2389778e-01,
          8.6684811e-01,
      ],
      [
          1.0000000e00,
          9.0666676e-01,
          6.4408922e-01,
          2.6128179e-01,
          -1.7029817e-01,
          -5.7008910e-01,
          -8.6346364e-01,
          -9.9565840e-01,
      ],
      [
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.basic_chebyshev(x, num=8, limit=1.5), expected, atol=1e-5
  )


def test_reciprocal_chebyshev() -> None:
  x = jnp.linspace(0.0, 10.0, 11)
  expected = jnp.asarray([
      [
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
          1.0000000e00,
      ],
      [
          1.0000000e00,
          -4.3711388e-08,
          -1.0000000e00,
          1.1924881e-08,
          1.0000000e00,
          -3.3776624e-07,
          -1.0000000e00,
          6.6360758e-07,
      ],
      [
          1.0000000e00,
          -3.3333331e-01,
          -7.7777779e-01,
          8.5185188e-01,
          2.0987666e-01,
          -9.9176949e-01,
          4.5130321e-01,
          6.9090086e-01,
      ],
      [
          1.0000000e00,
          -5.0000006e-01,
          -4.9999991e-01,
          1.0000000e00,
          -5.0000018e-01,
          -5.0000018e-01,
          1.0000000e00,
          -5.0000077e-01,
      ],
      [
          1.0000000e00,
          -6.0000008e-01,
          -2.7999982e-01,
          9.3599981e-01,
          -8.4320021e-01,
          7.5840250e-02,
          7.5219131e-01,
          -9.7847056e-01,
      ],
      [
          1.0000000e00,
          -6.6666669e-01,
          -1.1111108e-01,
          8.1481463e-01,
          -9.7530866e-01,
          4.8559657e-01,
          3.2784584e-01,
          -9.2272508e-01,
      ],
      [
          1.0000000e00,
          -7.1428573e-01,
          2.0408180e-02,
          6.8513119e-01,
          -9.9916703e-01,
          7.4225062e-01,
          -6.1190538e-02,
          -6.5483558e-01,
      ],
      [
          1.0000000e00,
          -7.4999994e-01,
          1.2499977e-01,
          5.6250048e-01,
          -9.6875012e-01,
          8.9062482e-01,
          -3.6718640e-01,
          -3.3984384e-01,
      ],
      [
          1.0000000e00,
          -7.7777779e-01,
          2.0987654e-01,
          4.5130315e-01,
          -9.1190368e-01,
          9.6721369e-01,
          -5.9265089e-01,
          -4.5311306e-02,
      ],
      [
          1.0000000e00,
          -7.9999995e-01,
          2.7999982e-01,
          3.5200047e-01,
          -8.4320021e-01,
          9.9711996e-01,
          -7.5219136e-01,
          2.0638731e-01,
      ],
      [
          1.0000000e00,
          -8.1818181e-01,
          3.3884305e-01,
          2.6371139e-01,
          -7.7037078e-01,
          9.9689543e-01,
          -8.6091262e-01,
          4.1187117e-01,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.reciprocal_chebyshev(x, num=8), expected, atol=1e-5
  )


def test_exponential_chebyshev() -> None:
  x = jnp.linspace(0.0, 10.0, 11)
  expected = jnp.asarray([
      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
      [
          1.0,
          -0.264241,
          -0.86035335,
          0.7189225,
          0.48041585,
          -0.97281337,
          0.03369904,
          0.9550043,
      ],
      [
          1.0,
          -0.7293294,
          0.06384273,
          0.63620484,
          -0.99184823,
          0.8105636,
          -0.19048685,
          -0.5327077,
      ],
      [
          1.0,
          -0.90042585,
          0.62153345,
          -0.21886396,
          -0.22739233,
          0.6283638,
          -0.90419716,
          0.99996173,
      ],
      [
          1.0,
          -0.9633688,
          0.8561587,
          -0.68622464,
          0.46601543,
          -0.21166462,
          -0.05819143,
          0.32378605,
      ],
      [
          1.0,
          -0.9865241,
          0.9464596,
          -0.8808863,
          0.79157156,
          -0.6809225,
          0.5519214,
          -0.408045,
      ],
      [
          1.0,
          -0.9950425,
          0.9802192,
          -0.9556771,
          0.92165923,
          -0.878503,
          0.82663745,
          -0.76657474,
      ],
      [
          1.0,
          -0.9981762,
          0.99271154,
          -0.9836259,
          0.9709524,
          -0.9547372,
          0.9350399,
          -0.91193163,
      ],
      [
          1.0,
          -0.9993291,
          0.99731725,
          -0.99396724,
          0.98928344,
          -0.98327214,
          0.9759417,
          -0.96730155,
      ],
      [
          1.0,
          -0.9997532,
          0.9990128,
          -0.9977793,
          0.9960533,
          -0.9938355,
          0.9911271,
          -0.98792964,
      ],
      [
          1.0,
          -0.9999092,
          0.9996369,
          -0.99918306,
          0.99854785,
          -0.9977314,
          0.99673367,
          -0.9955551,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.exponential_chebyshev(x, num=8), expected, atol=1e-5
  )
