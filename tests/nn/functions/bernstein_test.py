# Copyright 2024 The e3x Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import e3x
import jax.numpy as jnp
import pytest


def test__bernstein() -> None:
  x = jnp.linspace(0, 1, 11)
  expected_value = jnp.asarray([
      [1.0000000e00, 0.0000000e00, 0.0000000e00, 0.0000000e00],
      [7.2899973e-01, 2.4300018e-01, 2.7000017e-02, 9.9999947e-04],
      [5.1199985e-01, 3.8400027e-01, 9.6000060e-02, 7.9999957e-03],
      [3.4299982e-01, 4.4100028e-01, 1.8900014e-01, 2.6999986e-02],
      [2.1599992e-01, 4.3200034e-01, 2.8800023e-01, 6.3999996e-02],
      [1.2499994e-01, 3.7500027e-01, 3.7500027e-01, 1.2499994e-01],
      [6.3999966e-02, 2.8800020e-01, 4.3200034e-01, 2.1599996e-01],
      [2.6999986e-02, 1.8900014e-01, 4.4100028e-01, 3.4299982e-01],
      [7.9999957e-03, 9.6000060e-02, 3.8400030e-01, 5.1199985e-01],
      [9.9999900e-04, 2.7000006e-02, 2.4300012e-01, 7.2899985e-01],
      [0.0000000e00, 0.0000000e00, 0.0000000e00, 1.0000000e00],
  ])
  expected_grad = jnp.asarray([
      [-3.0, 3.0, 0.0, 0.0],
      [-2.4300003, 1.8899996, 0.51000047, 0.03],
      [-1.9200003, 0.95999956, 0.8400008, 0.12],
      [-1.4700001, 0.20999908, 0.990001, 0.26999998],
      [-1.08, -0.36000118, 0.9600011, 0.48000008],
      [-0.7500001, -0.7500012, 0.7500012, 0.7500001],
      [-0.48000002, -0.96000123, 0.360001, 1.0800002],
      [-0.26999998, -0.990001, -0.20999908, 1.4700001],
      [-0.12, -0.84000087, -0.95999944, 1.9200003],
      [-0.02999998, -0.51000035, -1.8900003, 2.4300005],
      [0.0, 0.0, -3.0, 3.0],
  ])
  value, grad = e3x.ops.evaluate_derivatives(
      lambda x: e3x.nn.functions.bernstein._bernstein(x, num=4), x, max_order=1
  )
  assert jnp.allclose(value, expected_value, atol=1e-5)
  assert jnp.allclose(grad, expected_grad, atol=1e-5)


@pytest.mark.parametrize('num', [1, 4, 1024])
def test__bernstein_has_nan_safe_derivatives(num: int) -> None:
  finfo = jnp.finfo(jnp.float32)
  x = jnp.asarray(
      [0.0, finfo.tiny, finfo.epsneg, 1.0 - finfo.epsneg, 1.0],
      dtype=jnp.float32,
  )
  for y in e3x.ops.evaluate_derivatives(
      lambda x: e3x.nn.functions.bernstein._bernstein(x, num=num),
      x,
      max_order=4,
  ):
    assert jnp.all(jnp.isfinite(y))


def test__bernstein_raises_with_invalid_num() -> None:
  with pytest.raises(ValueError, match='num must be greater or equal to 1'):
    e3x.nn.functions.bernstein._bernstein(0, num=0)


def test_basic_bernstein() -> None:
  x = jnp.linspace(-1.0, 2.0, 11)
  expected = jnp.asarray([
      [
          1.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
      ],
      [
          1.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
      ],
      [
          1.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
      ],
      [
          1.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
      ],
      [
          3.6725157e-01,
          3.9550197e-01,
          1.8253936e-01,
          4.6804935e-02,
          7.2007580e-03,
          6.6468585e-04,
          3.4086450e-05,
          7.4915170e-07,
      ],
      [
          5.8527518e-02,
          2.0484647e-01,
          3.0726969e-01,
          2.5605798e-01,
          1.2802899e-01,
          3.8408712e-02,
          6.4014522e-03,
          4.5724621e-04,
      ],
      [
          4.8199925e-03,
          3.8559958e-02,
          1.3220564e-01,
          2.5182015e-01,
          2.8779447e-01,
          1.9734488e-01,
          7.5179026e-02,
          1.2274119e-02,
      ],
      [
          9.5891555e-05,
          1.8459122e-03,
          1.5228777e-02,
          6.9798537e-02,
          1.9194598e-01,
          3.1671107e-01,
          2.9031852e-01,
          1.1405362e-01,
      ],
      [
          5.8527170e-09,
          5.7356743e-07,
          2.4089817e-05,
          5.6209642e-04,
          7.8693638e-03,
          6.6102706e-02,
          3.0847961e-01,
          6.1695945e-01,
      ],
      [
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          1.0000000e00,
      ],
      [
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          1.0000000e00,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.basic_bernstein(x, num=8, limit=1.5), expected, atol=1e-5
  )


def test_reciprocal_bernstein() -> None:
  x = jnp.linspace(0.0, 10.0, 11)
  expected = jnp.asarray([
      [
          1.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
      ],
      [
          7.8124814e-03,
          5.4687411e-02,
          1.6406223e-01,
          2.7343693e-01,
          2.7343693e-01,
          1.6406223e-01,
          5.4687411e-02,
          7.8124814e-03,
      ],
      [
          4.5724664e-04,
          6.4014583e-03,
          3.8408730e-02,
          1.2802905e-01,
          2.5605807e-01,
          3.0726969e-01,
          2.0484644e-01,
          5.8527503e-02,
      ],
      [
          6.1034982e-05,
          1.2817362e-03,
          1.1535626e-02,
          5.7678107e-02,
          1.7303433e-01,
          3.1146190e-01,
          3.1146187e-01,
          1.3348356e-01,
      ],
      [
          1.2799973e-05,
          3.5839935e-04,
          4.3007922e-03,
          2.8671935e-02,
          1.1468777e-01,
          2.7525076e-01,
          3.6700103e-01,
          2.0971474e-01,
      ],
      [
          3.5722378e-06,
          1.2502848e-04,
          1.8754273e-03,
          1.5628546e-02,
          7.8142732e-02,
          2.3442827e-01,
          3.9071363e-01,
          2.7908093e-01,
      ],
      [
          1.2142619e-06,
          5.0999064e-05,
          9.1798278e-04,
          9.1798287e-03,
          5.5078983e-02,
          1.9828439e-01,
          3.9656883e-01,
          3.3991593e-01,
      ],
      [
          4.7683599e-07,
          2.3364977e-05,
          4.9066491e-04,
          5.7244180e-03,
          4.0070929e-02,
          1.6829799e-01,
          3.9269528e-01,
          3.9269498e-01,
      ],
      [
          2.0907450e-07,
          1.1708182e-05,
          2.8099661e-04,
          3.7466183e-03,
          2.9972952e-02,
          1.4387023e-01,
          3.8365397e-01,
          4.3846136e-01,
      ],
      [
          1.0000002e-07,
          6.2999916e-06,
          1.7009987e-04,
          2.5514970e-03,
          2.2963457e-02,
          1.2400273e-01,
          3.7200812e-01,
          4.7829568e-01,
      ],
      [
          5.1315912e-08,
          3.5921098e-06,
          1.0776320e-04,
          1.7960526e-03,
          1.7960517e-02,
          1.0776311e-01,
          3.5921019e-01,
          5.1315677e-01,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.reciprocal_bernstein(x, num=8), expected, atol=1e-5
  )


def test_exponential_bernstein() -> None:
  x = jnp.linspace(0.0, 10.0, 11)
  expected = jnp.asarray([
      [
          1.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
          0.0000000e00,
      ],
      [
          9.1187982e-04,
          1.0968071e-02,
          5.6538727e-02,
          1.6191570e-01,
          2.7821681e-01,
          2.8683308e-01,
          1.6428667e-01,
          4.0327229e-02,
      ],
      [
          8.3152554e-07,
          3.7188656e-05,
          7.1280194e-04,
          7.5902166e-03,
          4.8494313e-02,
          1.8589991e-01,
          3.9590842e-01,
          3.6135423e-01,
      ],
      [
          7.5825168e-10,
          1.0130161e-07,
          5.8001947e-06,
          1.8449961e-04,
          3.5212738e-03,
          4.0323295e-02,
          2.5653070e-01,
          6.9943213e-01,
      ],
      [
          6.9143210e-13,
          2.5941704e-10,
          4.1712777e-08,
          3.7262196e-06,
          1.9971892e-04,
          6.4227507e-03,
          1.1474931e-01,
          8.7862217e-01,
      ],
      [
          6.3050930e-16,
          6.5061910e-13,
          2.8772962e-10,
          7.0691868e-08,
          1.0420903e-05,
          9.2170754e-04,
          4.5290589e-02,
          9.5377487e-01,
      ],
      [
          5.7499170e-19,
          1.6197397e-15,
          1.9554709e-12,
          1.3115491e-09,
          5.2779876e-07,
          1.2743975e-04,
          1.7094951e-02,
          9.8277473e-01,
      ],
      [
          5.2432457e-22,
          4.0212331e-18,
          1.3217290e-14,
          2.4135204e-11,
          2.6443043e-08,
          1.7382961e-05,
          6.3483836e-03,
          9.9363184e-01,
      ],
      [
          4.7801086e-25,
          9.9714054e-21,
          8.9145261e-17,
          4.4275881e-13,
          1.3194327e-09,
          2.3591647e-06,
          2.3434584e-03,
          9.9765182e-01,
      ],
      [
          4.3526142e-28,
          2.4691387e-23,
          6.0029185e-19,
          8.1078951e-15,
          6.5705719e-11,
          3.1948537e-07,
          8.6303061e-04,
          9.9913424e-01,
      ],
      [
          3.9869919e-31,
          6.1445017e-26,
          4.0583815e-21,
          1.4891824e-16,
          3.2786347e-12,
          4.3310191e-08,
          3.1784386e-04,
          9.9967974e-01,
      ],
  ])
  assert jnp.allclose(
      e3x.nn.exponential_bernstein(x, num=8), expected, atol=1e-5
  )
